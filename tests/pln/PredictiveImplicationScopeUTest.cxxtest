//
// Test casting to ScopeLink
//
#include <cmath>
#include <cxxtest/TestSuite.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/ScopeLink.h>
#include <opencog/atoms/core/Variables.h>
#include <opencog/spacetime/types/atom_types.h>
#include <opencog/pln/types/atom_types.h>

using namespace std;
using namespace opencog;

class PredictiveImplicationScopeUTest : public CxxTest::TestSuite
{
public:
	void testPredictiveImplicationScope(void);
};

#define an as->add_node
#define al as->add_link

void PredictiveImplicationScopeUTest::testPredictiveImplicationScope(void)
{
	AtomSpace* as = new AtomSpace();

	Handle t_intvl = al(TIME_INTERVAL_LINK,
	                    an(TIME_NODE, "1"),
	                    an(TIME_NODE, "2"));
	Handle pis = al(PREDICTIVE_IMPLICATION_SCOPE_LINK,
	                an(VARIABLE_NODE, "$X"),
	                t_intvl,
	                al(EVALUATION_LINK,
	                   an(PREDICATE_NODE, "P"),
	                   an(VARIABLE_NODE, "$X")),
	                   an(PREDICATE_NODE, "Q"));

	printf("pis=%s\n", pis->to_string().c_str());

	TSM_ASSERT("Expecting a ScopeLink",
		nameserver().isA(PREDICTIVE_IMPLICATION_SCOPE_LINK, SCOPE_LINK));
	ScopeLinkPtr scp = ScopeLinkCast(pis);


	// This should not be null. But it is due to some bug, to be fixed.
	printf("scope=%p\n", scp.operator->());
#if 0
	Variables result = ScopeLinkCast(pis)->get_variables();
	Variables exp = Variables(an(VARIABLE_NODE, "$X"));

	std::cout << "exp : " << oc_to_string(exp, empty_string) << std::endl
	          << "result : " << oc_to_string(result, empty_string);
	TS_ASSERT_EQUALS(result, exp);
#endif
}
